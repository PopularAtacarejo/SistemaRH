import { GitHubService } from './githubService';

export interface User {
  id: string;
  name: string;
  email: string;
  role: string;
  department: string;
  password?: string; // Apenas para autentica√ß√£o local
  isActive: boolean;
  createdAt: string;
}

export class UserService {
  // Cache local para usu√°rios
  private static cache = {
    users: null as User[] | null,
    lastUpdate: 0
  };

  private static readonly CACHE_DURATION = 60 * 1000; // 1 minuto

  // Verificar se cache √© v√°lido
  private static isCacheValid(): boolean {
    return Date.now() - this.cache.lastUpdate < this.CACHE_DURATION;
  }

  // Limpar cache
  private static clearCache(): void {
    this.cache.users = null;
    this.cache.lastUpdate = 0;
  }

  // Buscar todos os usu√°rios
  static async getAllUsers(): Promise<User[]> {
    try {
      console.log('üîÑ Carregando usu√°rios do GitHub...');

      // Verificar cache primeiro
      if (this.isCacheValid() && this.cache.users) {
        console.log('‚úÖ Usu√°rios carregados do cache local');
        return this.cache.users;
      }

      const usersData = await GitHubService.getUsersData();
      
      const users = usersData.map((user: any) => ({
        id: user.id,
        name: user.name,
        email: user.email,
        role: user.role,
        department: user.department,
        password: user.password, // Manter senha para autentica√ß√£o local
        isActive: user.isActive !== false, // Default true
        createdAt: user.createdAt || new Date().toISOString()
      }));

      // Atualizar cache
      this.cache.users = users;
      this.cache.lastUpdate = Date.now();

      console.log(`‚úÖ ${users.length} usu√°rios carregados do GitHub`);
      return users;
    } catch (error) {
      console.error('‚ùå Erro ao buscar usu√°rios:', error);
      
      // Fallback para cache se dispon√≠vel
      if (this.cache.users) {
        return this.cache.users;
      }
      
      throw error;
    }
  }

  // Criar novo usu√°rio
  static async createUser(userData: {
    name: string;
    email: string;
    role: string;
    department: string;
    password: string;
  }): Promise<void> {
    try {
      console.log('üîÑ Criando usu√°rio:', userData.email);
      
      const users = await GitHubService.getUsersData();
      
      // Verificar se email j√° existe
      if (users.some((u: any) => u.email.toLowerCase() === userData.email.toLowerCase())) {
        throw new Error('Este email j√° est√° em uso por outro usu√°rio');
      }

      // Gerar ID √∫nico
      const newId = `user-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;

      const newUser = {
        id: newId,
        name: userData.name,
        email: userData.email,
        role: userData.role,
        department: userData.department,
        password: userData.password, // Salvar senha (em produ√ß√£o, usar hash)
        isActive: true,
        createdAt: new Date().toISOString()
      };

      users.push(newUser);

      await GitHubService.saveUsersData(users);
      this.clearCache();

      console.log('‚úÖ Usu√°rio criado com sucesso');
    } catch (error) {
      console.error('‚ùå Erro ao criar usu√°rio:', error);
      throw error;
    }
  }

  // Atualizar usu√°rio
  static async updateUser(userId: string, updates: Partial<User>): Promise<void> {
    try {
      console.log(`üîÑ Atualizando usu√°rio ${userId}`);
      
      const users = await GitHubService.getUsersData();
      const userIndex = users.findIndex((u: any) => u.id === userId);
      
      if (userIndex === -1) {
        throw new Error('Usu√°rio n√£o encontrado');
      }

      // Verificar se email j√° existe (se estiver sendo alterado)
      if (updates.email && updates.email !== users[userIndex].email) {
        const emailExists = users.some((u: any, index: number) => 
          index !== userIndex && u.email.toLowerCase() === updates.email!.toLowerCase()
        );
        if (emailExists) {
          throw new Error('Este email j√° est√° em uso por outro usu√°rio');
        }
      }

      users[userIndex] = {
        ...users[userIndex],
        ...updates,
        updatedAt: new Date().toISOString()
      };

      await GitHubService.saveUsersData(users);
      this.clearCache();

      console.log('‚úÖ Usu√°rio atualizado com sucesso');
    } catch (error) {
      console.error('‚ùå Erro ao atualizar usu√°rio:', error);
      throw error;
    }
  }

  // Deletar usu√°rio
  static async deleteUser(userId: string): Promise<void> {
    try {
      console.log(`üîÑ Deletando usu√°rio ${userId}`);
      
      const users = await GitHubService.getUsersData();
      const filteredUsers = users.filter((u: any) => u.id !== userId);
      
      if (filteredUsers.length === users.length) {
        throw new Error('Usu√°rio n√£o encontrado');
      }

      await GitHubService.saveUsersData(filteredUsers);
      this.clearCache();

      console.log('‚úÖ Usu√°rio deletado com sucesso');
    } catch (error) {
      console.error('‚ùå Erro ao deletar usu√°rio:', error);
      throw error;
    }
  }

  // Buscar usu√°rio por email
  static async getUserByEmail(email: string): Promise<User | null> {
    try {
      console.log('üîç Buscando usu√°rio por email:', email);
      
      const users = await this.getAllUsers();
      const user = users.find(u => u.email.toLowerCase() === email.toLowerCase() && u.isActive);
      
      if (user) {
        console.log('‚úÖ Usu√°rio encontrado:', user.name);
        return user;
      } else {
        console.log('‚ùå Usu√°rio n√£o encontrado:', email);
        return null;
      }
    } catch (error) {
      console.error('‚ùå Erro ao buscar usu√°rio por email:', error);
      return null;
    }
  }

  // Autenticar usu√°rio
  static async authenticateUser(email: string, password: string): Promise<User | null> {
    try {
      console.log('üîê Autenticando usu√°rio:', email);
      
      const user = await this.getUserByEmail(email);
      
      if (!user) {
        console.log('‚ùå Usu√°rio n√£o encontrado para autentica√ß√£o');
        return null;
      }

      if (!user.isActive) {
        console.log('‚ùå Usu√°rio inativo');
        return null;
      }

      // Verificar senha
      if (user.password && user.password === password) {
        console.log('‚úÖ Autentica√ß√£o bem-sucedida');
        // Remover senha do objeto retornado por seguran√ßa
        const { password: _, ...userWithoutPassword } = user;
        return userWithoutPassword as User;
      } else {
        console.log('‚ùå Senha incorreta');
        return null;
      }
    } catch (error) {
      console.error('‚ùå Erro na autentica√ß√£o:', error);
      return null;
    }
  }
}