// üîê SERVI√áO DE AUTENTICA√á√ÉO SIMPLIFICADO
// Autentica√ß√£o direta com GitHub - Reposit√≥rio SistemaRH

import { GitHubDataService } from './githubDataService';

export interface SimpleUser {
  id: string;
  email: string;
  name: string;
  role: string;
  department: string;
  isActive: boolean;
  isMaster: boolean;
  permissions: {
    canCreateUsers: boolean;
    canEditUsers: boolean;
    canDeleteUsers: boolean;
    canManageRoles: boolean;
    canViewAudit: boolean;
    canManageSystem: boolean;
    canAccessAllData: boolean;
  };
  createdAt: string;
  lastUpdate: string;
}

export class SimpleAuthService {
  private static currentUser: SimpleUser | null = null;

  // === AUTENTICA√á√ÉO ===

  static async login(email: string, password: string): Promise<SimpleUser | null> {
    try {
      console.log('üîê Iniciando autentica√ß√£o simples...');
      console.log(`üìß Email: ${email}`);

      // Buscar usu√°rios do GitHub
      const users = await GitHubDataService.getUsersData();
      
      if (!users || users.length === 0) {
        console.log('‚ö†Ô∏è Nenhum usu√°rio encontrado, criando usu√°rio master...');
        await this.createMasterUser();
        return await this.login(email, password); // Tentar novamente
      }

      // Procurar usu√°rio pelo email
      const user = users.find((u: any) => 
        u.email?.toLowerCase() === email.toLowerCase() && u.isActive
      );

      if (!user) {
        console.log('‚ùå Usu√°rio n√£o encontrado ou inativo');
        return null;
      }

      // Verificar senha (compara√ß√£o simples)
      if (user.password !== password) {
        console.log('‚ùå Senha incorreta');
        return null;
      }

      console.log(`‚úÖ Login realizado: ${user.name} - ${user.role}`);
      
      // Salvar usu√°rio atual
      this.currentUser = {
        id: user.id,
        email: user.email,
        name: user.name,
        role: user.role,
        department: user.department,
        isActive: user.isActive,
        isMaster: user.isMaster || false,
        permissions: user.permissions || {
          canCreateUsers: false,
          canEditUsers: false,
          canDeleteUsers: false,
          canManageRoles: false,
          canViewAudit: false,
          canManageSystem: false,
          canAccessAllData: false
        },
        createdAt: user.createdAt,
        lastUpdate: user.lastUpdate
      };

      // Salvar na sess√£o
      this.saveToSession(this.currentUser);

      // Registrar atividade de login
      await this.logActivity({
        userId: user.id,
        action: 'login',
        description: `Login realizado por ${user.name}`,
        userAgent: navigator.userAgent,
        ip: 'N/A'
      });

      return this.currentUser;
    } catch (error) {
      console.error('‚ùå Erro na autentica√ß√£o:', error);
      return null;
    }
  }

  static logout(): void {
    console.log('üëã Fazendo logout...');
    
    if (this.currentUser) {
      // Registrar atividade de logout
      this.logActivity({
        userId: this.currentUser.id,
        action: 'logout',
        description: `Logout realizado por ${this.currentUser.name}`
      }).catch(console.error);
    }

    this.currentUser = null;
    this.clearSession();
    console.log('‚úÖ Logout realizado com sucesso');
  }

  static getCurrentUser(): SimpleUser | null {
    if (this.currentUser) {
      return this.currentUser;
    }

    // Tentar restaurar da sess√£o
    return this.restoreFromSession();
  }

  static isAuthenticated(): boolean {
    return this.getCurrentUser() !== null;
  }

  // === GERENCIAMENTO DE SESS√ÉO ===

  private static saveToSession(user: SimpleUser): void {
    try {
      localStorage.setItem('hrSystem_currentUser', JSON.stringify(user));
      sessionStorage.setItem('userLoggedIn', 'true');
      console.log('üíæ Sess√£o salva');
    } catch (error) {
      console.error('‚ùå Erro ao salvar sess√£o:', error);
    }
  }

  private static restoreFromSession(): SimpleUser | null {
    try {
      const stored = localStorage.getItem('hrSystem_currentUser');
      const isLoggedIn = sessionStorage.getItem('userLoggedIn');
      
      if (stored && isLoggedIn === 'true') {
        const user = JSON.parse(stored);
        this.currentUser = user;
        console.log('üîÑ Sess√£o restaurada:', user.name);
        return user;
      }
    } catch (error) {
      console.error('‚ùå Erro ao restaurar sess√£o:', error);
    }
    
    return null;
  }

  private static clearSession(): void {
    localStorage.removeItem('hrSystem_currentUser');
    sessionStorage.removeItem('userLoggedIn');
  }

  // === CRIA√á√ÉO DE USU√ÅRIO MASTER ===

  private static async createMasterUser(): Promise<void> {
    console.log('üëë Criando usu√°rio master...');

    const masterUser = {
      id: '1',
      email: 'jeferson@sistemahr.com',
      name: 'Jeferson',
      role: 'Desenvolvedor',
      department: 'Desenvolvimento',
      password: '873090As#27',
      isActive: true,
      isMaster: true,
      permissions: {
        canCreateUsers: true,
        canEditUsers: true,
        canDeleteUsers: true,
        canManageRoles: true,
        canViewAudit: true,
        canManageSystem: true,
        canAccessAllData: true
      },
      createdAt: new Date().toISOString(),
      createdBy: 'Sistema Autom√°tico',
      lastUpdate: new Date().toISOString(),
      description: 'Usu√°rio master - Desenvolvedor principal do sistema',
      repository: 'SistemaRH'
    };

    try {
      await GitHubDataService.saveUsersData([masterUser]);
      console.log('‚úÖ Usu√°rio master criado com sucesso');
    } catch (error) {
      console.error('‚ùå Erro ao criar usu√°rio master:', error);
      throw error;
    }
  }

  // === GERENCIAMENTO DE USU√ÅRIOS ===

  static async getAllUsers(): Promise<SimpleUser[]> {
    try {
      const users = await GitHubDataService.getUsersData();
      return users.map((user: any) => ({
        id: user.id,
        email: user.email,
        name: user.name,
        role: user.role,
        department: user.department,
        isActive: user.isActive,
        isMaster: user.isMaster || false,
        permissions: user.permissions || {},
        createdAt: user.createdAt,
        lastUpdate: user.lastUpdate
      }));
    } catch (error) {
      console.error('‚ùå Erro ao buscar usu√°rios:', error);
      return [];
    }
  }

  static async createUser(userData: {
    name: string;
    email: string;
    role: string;
    department: string;
    password: string;
    permissions?: any;
  }): Promise<boolean> {
    try {
      if (!this.currentUser || !this.currentUser.permissions.canCreateUsers) {
        console.log('‚ùå Sem permiss√£o para criar usu√°rios');
        return false;
      }

      const users = await GitHubDataService.getUsersData();
      
      // Verificar se email j√° existe
      if (users.some((u: any) => u.email === userData.email)) {
        console.log('‚ùå Email j√° existe');
        return false;
      }

      const newUser = {
        id: crypto.randomUUID(),
        email: userData.email,
        name: userData.name,
        role: userData.role,
        department: userData.department,
        password: userData.password,
        isActive: true,
        isMaster: false,
        permissions: userData.permissions || {
          canCreateUsers: false,
          canEditUsers: false,
          canDeleteUsers: false,
          canManageRoles: false,
          canViewAudit: false,
          canManageSystem: false,
          canAccessAllData: false
        },
        createdAt: new Date().toISOString(),
        createdBy: this.currentUser.name,
        lastUpdate: new Date().toISOString(),
        description: `Usu√°rio criado por ${this.currentUser.name}`,
        repository: 'SistemaRH'
      };

      users.push(newUser);
      await GitHubDataService.saveUsersData(users);

      // Registrar atividade
      await this.logActivity({
        userId: this.currentUser.id,
        action: 'create_user',
        description: `Usu√°rio ${userData.name} criado`,
        targetUserId: newUser.id
      });

      console.log('‚úÖ Usu√°rio criado com sucesso');
      return true;
    } catch (error) {
      console.error('‚ùå Erro ao criar usu√°rio:', error);
      return false;
    }
  }

  // === LOG DE ATIVIDADES ===

  private static async logActivity(activity: {
    userId: string;
    action: string;
    description: string;
    targetUserId?: string;
    userAgent?: string;
    ip?: string;
  }): Promise<void> {
    try {
      await GitHubDataService.saveUserActivityLog({
        ...activity,
        timestamp: new Date().toISOString(),
        repository: 'SistemaRH'
      });
    } catch (error) {
      console.error('‚ö†Ô∏è Erro ao registrar atividade:', error);
    }
  }

  // === VERIFICA√á√ïES DE PERMISS√ÉO ===

  static canCreateUsers(): boolean {
    return this.currentUser?.permissions.canCreateUsers || false;
  }

  static canEditUsers(): boolean {
    return this.currentUser?.permissions.canEditUsers || false;
  }

  static canDeleteUsers(): boolean {
    return this.currentUser?.permissions.canDeleteUsers || false;
  }

  static canManageSystem(): boolean {
    return this.currentUser?.permissions.canManageSystem || false;
  }

  static isMaster(): boolean {
    return this.currentUser?.isMaster || false;
  }

  // === INICIALIZA√á√ÉO ===

  static async initialize(): Promise<void> {
    console.log('üöÄ Inicializando servi√ßo de autentica√ß√£o...');
    
    // Tentar restaurar sess√£o
    const user = this.restoreFromSession();
    
    if (user) {
      console.log(`‚úÖ Usu√°rio restaurado: ${user.name}`);
    } else {
      console.log('üìù Nenhuma sess√£o ativa');
    }

    // Verificar se h√° usu√°rios no sistema
    try {
      const users = await GitHubDataService.getUsersData();
      if (!users || users.length === 0) {
        console.log('‚ö†Ô∏è Sistema sem usu√°rios, criando usu√°rio master...');
        await this.createMasterUser();
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è N√£o foi poss√≠vel verificar usu√°rios:', error);
    }

    console.log('‚úÖ Servi√ßo de autentica√ß√£o inicializado');
  }
}